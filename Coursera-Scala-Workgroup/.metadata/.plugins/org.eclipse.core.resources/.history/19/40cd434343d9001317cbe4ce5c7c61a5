package recfun
import common._

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int =  {
    
   def factorial(n:Int) : Int = {
 
									
									def factorialAcc(acc: Int, n: Int): Int= {
									if (n <= 1) acc
									else factorialAcc(n * acc, n - 1)
									}
									 
									factorialAcc(1, n)
								}
    
    def partialFactorial(s : Int, e: Int) : Int = {
 
													
													def partialFactorialAcc(s : Int, e: Int, acc: Int): Int = {
																												if(e >= s) acc
																												else  partialFactorialAcc(s - 1, e, s * acc)
																												}
 
													partialFactorialAcc(s, e, e)
    												}

if((c <= 0) || (r <= 0) || (r <= c))
1
else
partialFactorial(r, c+1)/factorial(r-c)


}
    
    
 
    
    /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {
    var perCount = 0
     if (chars.isEmpty) throw new NoSuchElementException
    def  countOpen(mychars: List[Char],  count: Int):Int ={
    
   var currentcount = count
   val opened:Char = '('
   
    val closed:Char =')'    
    if (currentcount >= 0){
						    if(!mychars.isEmpty)
						    {
						     if(mychars.head == opened ) {
						    							currentcount =  count+1
						    							}
						     else if (mychars.head == closed){
						    								currentcount= count-1
						    								} 
						    }
						   }
    
   mychars match{
     			case x :: tail => countOpen(tail, currentcount)
     			case Nil => currentcount
   				}
    }
   
   
   
     

   
  
    
    perCount = countOpen(chars,perCount)
    if (perCount ==0) true else false
        
  }
    
    
    
    
    
  

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int ={
		  /** return true if passed an empty list     */
		def nomore( coinvalues: List[Int]): Boolean ={
		  if (coinvalues.isEmpty) true 	else  false
		  						
		}

		/** return all coin values except the first */
		def exceptFirstDenomination( coinvalues: List[Int]):  List[Int] ={
		 tail
		}
		/** return only the first coin value */
		def firstDenomination( coinvalues: List[Int]): List[Int] ={
		 coinvalues.head
		  
		}


  var count = 0
        
      if (money  <= 0 || coins.isEmpty)     
      {
        count
      }
      else
      { 
         var local = money /firstDenomination[coins]
         
         money = money mod firstDenomination[coins]
         if (money>0)
         { 
           
        
        
         count= count+ countChange(money,exceptFirstDenomination[coins])
         }
          count
      }
     
   
 
}
